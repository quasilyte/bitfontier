package fontgen

import (
	"text/template"
)

type templateData struct {
	PkgName string

	Fonts []*sizedBitmapFont

	RuneToIndex []runeAndIndex

	OnMissing string
}

type runeAndIndex struct {
	Rune  rune
	Index int
}

var fontfaceTemplate = template.Must(template.New("fontface").Parse(`// Code generated by fontget, DO NOT EDIT

package {{$.PkgName}}

import (
	"golang.org/x/image/font"
	_ "embed"
)

{{- range $.Fonts}}
// New{{.ShortSizeTag}} allocates a font of size={{.Size}}.
//
// Allocating several instances of the same-sized font is unadvised
// as they would not share the resources.
func New{{.ShortSizeTag}}() font.Face {
	data := uncompress(size{{.SizeTag}}data)
	img := newBitmapImage(data, {{.GlyphWidth}}, {{.GlyphHeight}})
	f := newBitmapFont(img, {{.DotX}}, {{.DotY}})
	f.MinRune = {{.MinRune}}
	f.MaxRune = {{.MaxRune}}
	f.GlyphBitSize = {{.GlyphBitSize}}
	f.RuneToIndex = runeToIndex[:]
	return f
}
{{end}}

var (
	{{- range $.Fonts}}
	//go:embed {{.BitmapFilename}}
	size{{.SizeTag}}data []byte 
	{{end}}
)

var (
	runeToIndex = [...]uint16{
		{{- range .RuneToIndex }}
		{{.Rune}}: {{.Index}} + 1, // {{printf "%q" .Rune}}
		{{- end}}	
	}
)

const (
	onMissing = "{{.OnMissing}}"
)
`))
